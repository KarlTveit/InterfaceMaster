// Generated by gencpp from file asctec_hl_comm/mav_ctrl_motorsResponse.msg
// DO NOT EDIT!


#ifndef ASCTEC_HL_COMM_MESSAGE_MAV_CTRL_MOTORSRESPONSE_H
#define ASCTEC_HL_COMM_MESSAGE_MAV_CTRL_MOTORSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace asctec_hl_comm
{
template <class ContainerAllocator>
struct mav_ctrl_motorsResponse_
{
  typedef mav_ctrl_motorsResponse_<ContainerAllocator> Type;

  mav_ctrl_motorsResponse_()
    : motorsRunning(false)  {
    }
  mav_ctrl_motorsResponse_(const ContainerAllocator& _alloc)
    : motorsRunning(false)  {
  (void)_alloc;
    }



   typedef uint8_t _motorsRunning_type;
  _motorsRunning_type motorsRunning;





  typedef boost::shared_ptr< ::asctec_hl_comm::mav_ctrl_motorsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::asctec_hl_comm::mav_ctrl_motorsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct mav_ctrl_motorsResponse_

typedef ::asctec_hl_comm::mav_ctrl_motorsResponse_<std::allocator<void> > mav_ctrl_motorsResponse;

typedef boost::shared_ptr< ::asctec_hl_comm::mav_ctrl_motorsResponse > mav_ctrl_motorsResponsePtr;
typedef boost::shared_ptr< ::asctec_hl_comm::mav_ctrl_motorsResponse const> mav_ctrl_motorsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::asctec_hl_comm::mav_ctrl_motorsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::asctec_hl_comm::mav_ctrl_motorsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::asctec_hl_comm::mav_ctrl_motorsResponse_<ContainerAllocator1> & lhs, const ::asctec_hl_comm::mav_ctrl_motorsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.motorsRunning == rhs.motorsRunning;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::asctec_hl_comm::mav_ctrl_motorsResponse_<ContainerAllocator1> & lhs, const ::asctec_hl_comm::mav_ctrl_motorsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace asctec_hl_comm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::asctec_hl_comm::mav_ctrl_motorsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::asctec_hl_comm::mav_ctrl_motorsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::asctec_hl_comm::mav_ctrl_motorsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::asctec_hl_comm::mav_ctrl_motorsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::asctec_hl_comm::mav_ctrl_motorsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::asctec_hl_comm::mav_ctrl_motorsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::asctec_hl_comm::mav_ctrl_motorsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "246eeab4e06271d99512461f49c049e7";
  }

  static const char* value(const ::asctec_hl_comm::mav_ctrl_motorsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x246eeab4e06271d9ULL;
  static const uint64_t static_value2 = 0x9512461f49c049e7ULL;
};

template<class ContainerAllocator>
struct DataType< ::asctec_hl_comm::mav_ctrl_motorsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "asctec_hl_comm/mav_ctrl_motorsResponse";
  }

  static const char* value(const ::asctec_hl_comm::mav_ctrl_motorsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::asctec_hl_comm::mav_ctrl_motorsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool      motorsRunning\n"
"\n"
;
  }

  static const char* value(const ::asctec_hl_comm::mav_ctrl_motorsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::asctec_hl_comm::mav_ctrl_motorsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motorsRunning);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mav_ctrl_motorsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::asctec_hl_comm::mav_ctrl_motorsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::asctec_hl_comm::mav_ctrl_motorsResponse_<ContainerAllocator>& v)
  {
    s << indent << "motorsRunning: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motorsRunning);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASCTEC_HL_COMM_MESSAGE_MAV_CTRL_MOTORSRESPONSE_H
